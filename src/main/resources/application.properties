
server.port=8000

spring.application.name = sharding-jdbc-demo
server.servlet.context-path = /sharding-jdbc-demo
spring.http.encoding.enabled = true
spring.http.encoding.charset = UTF-8
spring.http.encoding.force = true

spring.main.allow-bean-definition-overriding = true
mybatis.configuration.map-underscore-to-camel-case = true


# 以下是分片规则配置
# 定义数据源
spring.shardingsphere.datasource.names = m0,m0s0,m1,m1s0,m2,m2s0

spring.shardingsphere.datasource.m0.type = com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.m0.driver-class-name = com.mysql.jdbc.Driver
spring.shardingsphere.datasource.m0.url = jdbc:mysql://192.168.242.130:3306/order_db_0?useUnicode=true&characterEncoding=utf8&serverTimezone=Asia/Shanghai
spring.shardingsphere.datasource.m0.username = root
spring.shardingsphere.datasource.m0.password = root

spring.shardingsphere.datasource.m0s0.type = com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.m0s0.driver-class-name = com.mysql.jdbc.Driver
spring.shardingsphere.datasource.m0s0.url = jdbc:mysql://192.168.242.131:3306/order_db_0?useUnicode=true&characterEncoding=utf8&serverTimezone=Asia/Shanghai
spring.shardingsphere.datasource.m0s0.username = root
spring.shardingsphere.datasource.m0s0.password = root


spring.shardingsphere.datasource.m1.type = com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.m1.driver-class-name = com.mysql.jdbc.Driver
spring.shardingsphere.datasource.m1.url = jdbc:mysql://192.168.242.130:3306/order_db_1?useUnicode=true&characterEncoding=utf8&serverTimezone=Asia/Shanghai
spring.shardingsphere.datasource.m1.username = root
spring.shardingsphere.datasource.m1.password = root

spring.shardingsphere.datasource.m1s0.type = com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.m1s0.driver-class-name = com.mysql.jdbc.Driver
spring.shardingsphere.datasource.m1s0.url = jdbc:mysql://192.168.242.131:3306/order_db_1?useUnicode=true&characterEncoding=utf8&serverTimezone=Asia/Shanghai
spring.shardingsphere.datasource.m1s0.username = root
spring.shardingsphere.datasource.m1s0.password = root


spring.shardingsphere.datasource.m2.type = com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.m2.driver-class-name = com.mysql.jdbc.Driver
spring.shardingsphere.datasource.m2.url = jdbc:mysql://192.168.242.130:3306/user_db?useUnicode=true&characterEncoding=utf8&serverTimezone=Asia/Shanghai
spring.shardingsphere.datasource.m2.username = root
spring.shardingsphere.datasource.m2.password = root

spring.shardingsphere.datasource.m2.type = com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.m2.driver-class-name = com.mysql.jdbc.Driver
spring.shardingsphere.datasource.m2.url = jdbc:mysql://192.168.242.130:3306/user_db?useUnicode=true&characterEncoding=utf8&serverTimezone=Asia/Shanghai
spring.shardingsphere.datasource.m2.username = root
spring.shardingsphere.datasource.m2.password = root

spring.shardingsphere.datasource.m2s0.type = com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.m2s0.driver-class-name = com.mysql.jdbc.Driver
spring.shardingsphere.datasource.m2s0.url = jdbc:mysql://192.168.242.131:3306/user_db?useUnicode=true&characterEncoding=utf8&serverTimezone=Asia/Shanghai
spring.shardingsphere.datasource.m2s0.username = root
spring.shardingsphere.datasource.m2s0.password = root

#配置主从关系，实现读写分离
spring.shardingsphere.sharding.master-slave-rules.ds0.master-data-source-name=m0
spring.shardingsphere.sharding.master-slave-rules.ds0.slave-data-source-names=m0s0

spring.shardingsphere.sharding.master-slave-rules.ds1.master-data-source-name=m1
spring.shardingsphere.sharding.master-slave-rules.ds1.slave-data-source-names=m1s0

spring.shardingsphere.sharding.master-slave-rules.ds2.master-data-source-name=m2
spring.shardingsphere.sharding.master-slave-rules.ds2.slave-data-source-names=m2s0

#配置数据节点，指定t_order表的数据分布情况，既做了读写分离，也做了分库分表就这么配
spring.shardingsphere.sharding.tables.t_order.actual-data-nodes = ds$->{0..1}.t_order_$->{0..1}
spring.shardingsphere.sharding.tables.t_order_item.actual-data-nodes = ds$->{0..1}.t_order_item_$->{0..1}
#配置数据节点，指定t_user表的数据分布情况
spring.shardingsphere.sharding.tables.t_user.actual-data-nodes = ds$->{2}.t_user


# 指定t_order表的分库策略
spring.shardingsphere.sharding.tables.t_order.database-strategy.inline.sharding-column=user_id
spring.shardingsphere.sharding.tables.t_order.database-strategy.inline.algorithm-expression=ds$->{user_id % 2}   
# 指定t_order_item表的分库策略    
spring.shardingsphere.sharding.tables.t_order_item.database-strategy.inline.sharding-column=user_id
spring.shardingsphere.sharding.tables.t_order_item.database-strategy.inline.algorithm-expression=ds$->{user_id % 2}       
 
#水平分表配置
#指定t_order表的分片策略，分片策略包括分片键和分片算法 
#spring.shardingsphere.sharding.tables.t_order.table-strategy.inline.sharding-column = order_id
#spring.shardingsphere.sharding.tables.t_order.table-strategy.inline.algorithm-expression = t_order_$->{order_id % 2}
#指定t_order_item表的分片策略
#spring.shardingsphere.sharding.tables.t_order_item.table-strategy.inline.sharding-column = order_id
#spring.shardingsphere.sharding.tables.t_order_item.table-strategy.inline.algorithm-expression = t_order_item_$->{order_id % 2}

spring.shardingsphere.sharding.tables.t_order.table-strategy.standard.sharding-column = order_id
spring.shardingsphere.sharding.tables.t_order.table-strategy.standard.precise-algorithm-class-name = com.example.demo.Strategy.MyPreciseShardingAlgorithm

# 指定t_user表的分片策略，分片策略包括分片键和分片算法 。下面这种配置就是没有水平分表，全部都指向t_user
spring.shardingsphere.sharding.tables.t_user.table-strategy.inline.sharding-column = user_id
spring.shardingsphere.sharding.tables.t_user.table-strategy.inline.algorithm-expression = t_user

# 指定t_order表的主键生成策略为SNOWFLAKE
spring.shardingsphere.sharding.tables.t_order.key-generator.column=order_id
spring.shardingsphere.sharding.tables.t_order.key-generator.type=SNOWFLAKE

#绑定表配置
spring.shardingsphere.sharding.binding-tables[0]=t_order,t_order_item

#配置公共表公共表，每个数据库中都有
spring.shardingsphere.sharding.broadcast-tables[0]=t_dict

# 打开sharding jdbc sql输出日志
spring.shardingsphere.props.sql.show = true

logging.level.root = info
logging.level.org.springframework.web = info
logging.level.com.pbteach.dbsharding  = debug
logging.level.druid.sql = debug